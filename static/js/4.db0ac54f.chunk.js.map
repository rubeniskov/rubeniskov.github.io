{"version":3,"sources":["../packages/sandbox/glsl/setup.js","../packages/sandbox/glsl/glslify.js","../packages/sandbox/glsl/index.js"],"names":["getShaderError","gl","source","vertext","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","setup","canvas","fragment","opts","fn","onError","attributes","uniforms","restOps","regl","createRegl","resizer","canvasFit","_gl","glslify","err","frag","defaults","vert","Error","drawTriangle","position","buffer","time","prop","resolution","count","console","log","frame","clear","color","depth","drawingBufferWidth","drawingBufferHeight","draw","global","addEventListener","removeEventListener","detachResize","destroy","glslifyBundle","require","cb","deps","id","file","entry","process","nextTick","String","styled","className","value","useState","error","setError","canvasRef","useRef","useEffect","current","useLayoutEffect","_jsxs","children","_jsx","message","ref","withConfig","displayName","componentId"],"mappings":"sNAkBMA,EAAiB,SAACC,EAAIC,EAAQC,GAClC,IAAIC,EAASH,EAAGI,aAAaF,EAAUF,EAAGK,cAAgBL,EAAGM,iBAI7D,OAHAN,EAAGO,aAAaJ,EAAQF,GACxBD,EAAGQ,cAAcL,GAEZH,EAAGS,mBAAmBN,EAAQH,EAAGU,gBAI/B,KAHEV,EAAGW,iBAAiBR,IAyEhBS,IAnED,SAACC,EAAQC,EAAUC,GAAS,IAxBrBC,EAwBqB,iBAM/BD,GAJPE,EAFsC,EAEtCA,QACAC,EAHsC,EAGtCA,WACAC,EAJsC,EAItCA,SACGC,EALmC,mDAQlCC,EAAOC,IAAWT,GAClBU,EAAUC,IAAUX,GACpBb,EAAKqB,EAAKI,IAmDhB,OAPAC,YAAQZ,GAAU,SAACa,EAAKC,GACtB,GAAID,EAAK,MAAMA,GA3CJ,WAGF,6DAAP,GAAO,IAFTC,YAES,MAFFC,WAEE,MADTC,YACS,MADFD,SACE,EACHF,EAAM5B,EAAeC,EAAI4B,GAE/B,GAAID,GAAOV,EACT,OAAOA,EAAQ,IAAIc,MAAMJ,IAG3B,IAAMK,EAAeX,EAAK,2BAAKD,GAAN,IACvBQ,OACAE,OACAZ,WAAY,aACVe,SAAUZ,EAAKa,OAAO,CAAC,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,CAAC,GAAI,MAI5ChB,GAELC,SAAU,aACRgB,KAAMd,EAAKe,KAAK,QAChBC,WAAYhB,EAAKe,KAAK,eACnBjB,GAELmB,MAAO,KAETC,QAAQC,IAAInB,EAAKI,KACjBJ,EAAKoB,OAAM,YAEL,IADJN,EACI,EADJA,KAEAd,EAAKqB,MAAM,CACTC,MAAO,CAAC,EAAG,EAAG,EAAG,GACjBC,MAAO,IAETZ,EAAa,CACXG,OACAE,WAAY,CAACrC,EAAG6C,mBAAoB7C,EAAG8C,0BAO3CC,CAAK,CACHnB,YAjFeZ,EAoFNO,EAnFTyB,EAAOC,kBACTD,EAAOC,iBAAiB,SAAUjC,GAAI,GAmFjC,YA/EY,SAAAA,GACfgC,EAAOE,qBACTF,EAAOE,oBAAoB,SAAUlC,GA8ErCmC,CAAa5B,GACbF,EAAK+B,c,mDC7FT,YACA,IAAMC,EAAgBC,EAAQ,KAgCf5B,IAvBC,SAACzB,EAAQsD,GACvB,IACIC,EAAO,CAAC,CACVC,GAAI,EACJD,KAAM,CACJ,wBAAyB,GAE3BE,KAAM,8BACNzD,OAAQ,4QACR0D,OAAO,GACN,CACDF,GAAI,EACJD,KAAM,GACNE,KAAM,4DACNzD,OAAQ,sqEACR0D,OAAO,IAETC,EAAQC,UAAS,WAEfN,EAAG,KAAMtD,GAAU6D,OAAOT,EAAcG,W,mGCe7BO,uBAtCK,SAAC,GAIf,IAHJC,EAGI,EAHJA,UACAC,EAEI,EAFJA,MACAhD,EACI,EADJA,QACI,EACsBiD,qBADtB,mBACGC,EADH,KACUC,EADV,KAEEC,EAAYC,iBAAO,MAiBzB,OAhBAC,qBAAU,WACR,GAAIF,EAAUG,QACZ,OAAO5D,YAAMyD,EAAUG,QAASP,EAAO,CACrChD,QAAS,SAAAU,GACHV,GACFA,EAAQA,GAGVmD,EAASzC,QAId,CAAC0C,EAAWJ,IACfQ,2BAAgB,WACdL,EAAS,QACR,CAACH,IACgBS,eAAM,MAAO,CAC/BV,UAAWA,EACXW,SAAU,CAACR,GAAsBS,cAAK,MAAO,CAC3CZ,UAAW,gBACXW,SAAuBC,cAAK,MAAO,CACjCD,SAAuBC,cAAK,OAAQ,CAClCD,SAAUR,EAAMU,cAGLD,cAAK,SAAU,CAC9BE,IAAKT,UAKwBU,WAAW,CAC5CC,YAAa,OACbC,YAAa,YAFAlB,CAGZ,CAAC","file":"static/js/4.db0ac54f.chunk.js","sourcesContent":["import canvasFit from \"canvas-fit\";\nimport createRegl from \"regl/dist/regl.unchecked\"; // import createRegl from \"regl/dist/regl.js\";\n\nimport glslify from \"./glslify\";\nimport * as defaults from \"./defaults\";\n\nconst attachResize = fn => {\n  if (global.addEventListener) {\n    global.addEventListener(\"resize\", fn, false);\n  }\n};\n\nconst detachResize = fn => {\n  if (global.removeEventListener) {\n    global.removeEventListener(\"resize\", fn);\n  }\n};\n\nconst getShaderError = (gl, source, vertext) => {\n  var shader = gl.createShader(vertext ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader); // Check for any compilation error\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return gl.getShaderInfoLog(shader);\n  }\n\n  return null;\n};\n\nconst setup = (canvas, fragment, opts) => {\n  const {\n    onError,\n    attributes,\n    uniforms,\n    ...restOps\n  } = { ...opts\n  };\n  const regl = createRegl(canvas);\n  const resizer = canvasFit(canvas);\n  const gl = regl._gl;\n\n  const draw = ({\n    frag = defaults.fragment,\n    vert = defaults.vertex\n  } = {}) => {\n    const err = getShaderError(gl, frag);\n\n    if (err && onError) {\n      return onError(new Error(err));\n    }\n\n    const drawTriangle = regl({ ...restOps,\n      frag,\n      vert,\n      attributes: {\n        position: regl.buffer([[-1, -1], [-1, 4], [4, -1] // [-2, -2],\n        // [4, -2],\n        // [4, 4],\n        ]),\n        ...attributes\n      },\n      uniforms: {\n        time: regl.prop(\"time\"),\n        resolution: regl.prop(\"resolution\"),\n        ...uniforms\n      },\n      count: 3\n    });\n    console.log(regl._gl);\n    regl.frame(({\n      time\n    }) => {\n      regl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n      });\n      drawTriangle({\n        time,\n        resolution: [gl.drawingBufferWidth, gl.drawingBufferHeight]\n      });\n    });\n  };\n\n  glslify(fragment, (err, frag) => {\n    if (err) throw err;\n    draw({\n      frag\n    }); // draw();\n  });\n  attachResize(resizer);\n  return () => {\n    detachResize(resizer);\n    regl.destroy();\n  };\n};\n\nexport default setup;","// const glslifyDeps = require(\"./glslify-deps\");\nconst glslifyBundle = require(\"glslify-bundle\"); // const glslify = (source, cb) => {\n//   glslifyDeps(source, (err, tree) => {\n//     console.log(tree);\n//     if (err) return cb(err);\n//     cb(null, String(glslifyBundle(tree)));\n//   });\n// };\n\n\nconst glslify = (source, cb) => {\n  let err = null;\n  let deps = [{\n    id: 0,\n    deps: {\n      \"glsl-noise/simplex/2d\": 1\n    },\n    file: \"/private/tmp/test/test.glsl\",\n    source: \"precision mediump float;\\n#pragma glslify: snoise2 = require(glsl-noise/simplex/2d) \\n\\nuniform vec2 resolution;\\nuniform float time;\\n\\nvoid main() {\\n\\tvec2 st = gl_FragCoord.xy/resolution;\\n\\n\\tgl_FragColor = vec4(vec3(snoise2(5.0 * st + time * 0.1)), 1.0);\\n}\\n\",\n    entry: true\n  }, {\n    id: 1,\n    deps: {},\n    file: \"/private/tmp/test/node_modules/glsl-noise/simplex/2d.glsl\",\n    source: \"//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n#pragma glslify: export(snoise)\\n\",\n    entry: false\n  }];\n  process.nextTick(() => {\n    if (err) return cb(err);\n    cb(null, source || String(glslifyBundle(deps)));\n  });\n};\n\nexport default glslify;","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useRef, useEffect, useLayoutEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport setup from \"./setup\";\n\nconst GlslSandbox = ({\n  className,\n  value,\n  onError\n}) => {\n  const [error, setError] = useState();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current) {\n      return setup(canvasRef.current, value, {\n        onError: err => {\n          if (onError) {\n            onError(onError);\n          }\n\n          setError(err);\n        }\n      });\n    }\n  }, [canvasRef, value]);\n  useLayoutEffect(() => {\n    setError(null);\n  }, [value]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [error && /*#__PURE__*/_jsx(\"div\", {\n      className: \"error-overlay\",\n      children: /*#__PURE__*/_jsx(\"pre\", {\n        children: /*#__PURE__*/_jsx(\"code\", {\n          children: error.message\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"canvas\", {\n      ref: canvasRef\n    })]\n  });\n};\n\nexport default styled(GlslSandbox).withConfig({\n  displayName: \"glsl\",\n  componentId: \"vb91tm-0\"\n})([\"width:100%;height:100%;position:relative;overflow:auto;& .error-overlay{background-color:rgba(255,255,255,0.8);position:absolute;top:0;left:0;width:100%;height:100%;z-index:1;}\"]);"],"sourceRoot":""}